{"version":3,"sources":["logo.svg","Histogram.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Histogram","props","data","this","buildData","drawBarChart","result","key","hasOwnProperty","obj","push","tooltip","d3","refs","canvas","append","attr","style","selectAll","enter","datapoint","value","iteration","on","event","html","pageX","pageY","ref","Component","App","className","size","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oLAAAA,EAAOC,QAAU,IAA0B,kC,uICItBC,E,kDAClB,WAAYC,GAAQ,uCACXA,G,gEAIN,IAAMC,EAAOC,KAAKC,YAClBD,KAAKE,aAAaH,K,kCAIlB,IAAII,EAAS,GACb,IAAK,IAAMC,KAAOJ,KAAKF,MAAMC,KAC1B,GAAIC,KAAKF,MAAMC,KAAKM,eAAeD,GAAM,CACtC,IACIE,EAAM,CAAE,IAAOF,EAAK,MADRJ,KAAKF,MAAMC,KAAKK,IAEhCD,EAAOI,KAAKD,GAIlB,OAAOH,I,mCAGGJ,GACV,IAIMS,EAAUC,IAAUT,KAAKU,KAAKC,QAChCC,OAAO,OACPC,KAAK,QAAS,WACdC,MAAM,UAAW,QAEHL,IAAUT,KAAKU,KAAKC,QAClCC,OAAO,OACPC,KAAK,QAVW,KAWhBA,KAAK,SAZY,KAajBC,MAAM,SAAU,mBAEVC,UAAU,QAChBhB,KAAKA,GAAMiB,QACXJ,OAAO,QACPC,KAAK,QAAS,IACdA,KAAK,UAAU,SAACI,GAAD,OAjBL,GAiBoBA,EAAUC,SACxCL,KAAK,OAAQ,UACbA,KAAK,KAAK,SAACI,EAAWE,GAAZ,OAAsC,GAAZA,KACpCN,KAAK,KAAK,SAACI,GAAD,OAtBO,IAEP,GAoB8BA,EAAUC,SAClDE,GAAG,aAAa,SAACC,EAAOJ,EAAWE,GACjCX,EAAQM,MAAM,UAAW,SACrBQ,KAAKL,EAAUb,IAAM,OAASa,EAAUC,OACxCJ,MAAM,OAAQO,EAAME,MAAQ,MAC5BT,MAAM,MAAOO,EAAMG,MAAQ,SAEjCJ,GAAG,aAAa,SAACC,GACfb,EAAQM,MAAM,OAAQO,EAAME,MAAQ,MAChCT,MAAM,MAAQO,EAAMG,MAAQ,GAAM,SAExCJ,GAAG,YAAY,WACbZ,EAAQM,MAAM,UAAW,a,+BAK/B,OAAO,yBAAKW,IAAI,e,GA/DiBC,aCWxBC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAClB,kBAAC,EAAD,CAAW7B,KAAM,CAAC,OAAU,GAAI,QAAW,EAAG,MAAS,GAAI,QAAW,GAAI,QAAW,IAAK8B,KAAM,CAAC,IAAI,UCGvFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8f003683.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport './App.css'\r\nimport * as d3 from 'd3'\r\n\r\nexport default class Histogram extends Component {\r\n   constructor(props) {\r\n      super(props)\r\n   }\r\n\r\n   componentDidMount() {\r\n      const data = this.buildData()\r\n      this.drawBarChart(data)\r\n   }\r\n\r\n   buildData() {\r\n      let result = [];\r\n      for (const key in this.props.data) {\r\n         if (this.props.data.hasOwnProperty(key)) {\r\n            const element = this.props.data[key];\r\n            var obj = { \"key\": key, \"value\": element }\r\n            result.push(obj);\r\n         }\r\n      }\r\n\r\n      return result;\r\n   }\r\n\r\n   drawBarChart(data) {\r\n      const canvasHeight = 400\r\n      const canvasWidth = 600\r\n      const scale = 20\r\n\r\n      const tooltip = d3.select(this.refs.canvas)\r\n         .append('div')\r\n         .attr('class', 'tooltip')\r\n         .style('display', 'none')\r\n\r\n      const svgCanvas = d3.select(this.refs.canvas)\r\n         .append('svg')\r\n         .attr('width', canvasWidth)\r\n         .attr('height', canvasHeight)\r\n         .style('border', '1px solid black')\r\n\r\n      svgCanvas.selectAll('rect')\r\n         .data(data).enter()\r\n         .append('rect')\r\n         .attr('width', 40)\r\n         .attr('height', (datapoint) => datapoint.value * scale)\r\n         .attr('fill', 'orange')\r\n         .attr('x', (datapoint, iteration) => iteration * 45)\r\n         .attr('y', (datapoint) => canvasHeight - datapoint.value * scale)\r\n         .on('mouseover', (event, datapoint, iteration) => {\r\n            tooltip.style('display', 'block')\r\n               .html(datapoint.key + \"<hr>\" + datapoint.value)\r\n               .style('left', event.pageX + \"px\")\r\n               .style('top', event.pageY + 'px')\r\n         })\r\n         .on('mousemove', (event) => {\r\n            tooltip.style('left', event.pageX + \"px\")\r\n               .style('top', (event.pageY - 40) + 'px')\r\n         })\r\n         .on('mouseout', () => {\r\n            tooltip.style('display', 'none')\r\n         })\r\n   }\r\n\r\n   render() {\r\n      return <div ref=\"canvas\"></div>\r\n   }\r\n}\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Histogram from \"./Histogram\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <Histogram data={{\"apples\": 10, \"oranges\": 5, \"pears\": 15, \"peaches\": 30, \"bananas\": 17}} size={[500,500]} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}